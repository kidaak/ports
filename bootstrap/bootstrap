#!/bin/sh
#
# Copyright (c) 2012 Antti Harri <iku@openbsd.fi>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# XXX
# x can be removed
set +h
set -eux

# GNU make required
#
# Adjust -j parameter to speed up build on a multi-core system.
# See what the following prints if you're unsure:
# grep -c ^processor /proc/cpuinfo
MAKE="gmake -j $(grep -c ^processor /proc/cpuinfo)"
CC="ccache gcc"

BASE=$(cd -- "$(dirname -- "$0")"; pwd)

FETCH_CMD="wget -c"
DESTDIR=/buildroot
PREFIX=/tools
PORTSDIR=$(dirname $BASE)
DISTDIR=$PORTSDIR/distfiles
WRKDIR="${PORTSDIR}/pobj/bootstrap"

# Having the target triplet without the annoying -gnu
# suffix might not work on i386 systems.
TARGET=`uname -m`-obscure-linux
PATH=/tools/bin:/bin:/usr/bin:/usr/local/bin

BINUTILS_VERSION=2.22
BINUTILS_URL=http://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.gz
MPFR_VERSION=3.1.0
MPFR_URL=http://www.mpfr.org/mpfr-$MPFR_VERSION/mpfr-$MPFR_VERSION.tar.gz
GMP_VERSION=5.0.2
GMP_URL=ftp://ftp.gmplib.org/pub/gmp-$GMP_VERSION/gmp-$GMP_VERSION.tar.gz
MPC_VERSION=0.9
MPC_URL=http://www.multiprecision.org/mpc/download/mpc-$MPC_VERSION.tar.gz
GCC_VERSION=4.7.0
GCC_URL=http://ftp.nluug.nl/languages/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2
LINUX_VERSION=3.3.5
LINUX_URL=http://kernel.org/pub/linux/kernel/v3.0/linux-$LINUX_VERSION.tar.bz2
UCLIBC_VERSION=0.9.33.2
UCLIBC_URL=http://www.uclibc.org/downloads/uClibc-$UCLIBC_VERSION.tar.xz

export PATH CC

# Pick up functions
. ./functions.sh

mkdir -p "$WRKDIR" "$DESTDIR/tools"
ln -fs "$DESTDIR/tools" /

cd "$WRKDIR"

if [ ! -f .binutils_done ]; then
	clean "binutils-$BINUTILS_VERSION" binutils-build
	extract_distfile "$BINUTILS_URL"
	apply_patch binutils
	mkdir binutils-build
	cd binutils-build
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-sysroot="$DESTDIR"		\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--target="$TARGET"			\
		--disable-werror			\
		--disable-nls
	$MAKE
	case $(uname -m) in
		x86_64) mkdir -p "$PREFIX/lib" && ln -sv lib "$PREFIX/lib64" ;;
	esac
	$MAKE install
	build_done binutils
	clean binutils-build
fi

if [ ! -f .gmp_done ]; then
	clean "gmp-$GMP_VERSION" gmp-build
	extract_distfile "$GMP_URL"
	mkdir gmp-build
	cd gmp-build
	"../gmp-$GMP_VERSION/configure" \
		--prefix="$PREFIX"
	$MAKE
	$MAKE install
	build_done gmp
fi

if [ ! -f .mpfr_done ]; then
	clean "mpfr-$MPFR_VERSION" mpfr-build
	extract_distfile "mpfr-$MPFR_VERSION;$MPFR_URL"
	mkdir mpfr-build
	cd mpfr-build
	"../mpfr-$MPFR_VERSION/configure"	\
		--prefix="$PREFIX"		\
		--with-gmp="$PREFIX"
	$MAKE
	$MAKE install
	build_done mpfr
fi

if [ ! -f .mpc_done ]; then
	clean "mpc-$MPC_VERSION" mpc-build
	extract_distfile "$MPC_URL"
	mkdir mpc-build
	cd mpc-build
	"../mpc-$MPC_VERSION/configure"	\
		--prefix="$PREFIX"	\
		--with-gmp="$PREFIX"	\
		--with-mpfr="$PREFIX"
	$MAKE
	$MAKE install
	build_done mpc
fi

if [ ! -f .gcc_done ]; then
	# If gcc-build exists that means we have a working gcc source directory
	# in that case just wipe out the build.
	# This saves at least 2-3 minutes on another run of
	# gcc after a failed build.
	if [ -d "gcc-build" -a -d "gcc-$GCC_VERSION" ]; then
		clean gcc-build
	else
		clean "gcc-$GCC_VERSION" gcc-build
		extract_distfile "gcc;$GCC_URL"
		for file in $(find "gcc-$GCC_VERSION/gcc/config" -name linux64.h -o -name linux.h -o -name sysv4.h); do
			cp -uv "$file" "$file.orig"
			sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
				-e 's@/usr@/tools@g' "$file.orig" > "$file"
			printf '\n\n/* Added by Obscure Linux bootstrap script */\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_1\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_2\n' >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_1 "%s/lib/"\n' "$PREFIX" >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> "$file"
			touch "$file.orig"
		done
	fi

	mkdir gcc-build
	cd gcc-build

	"../gcc-$GCC_VERSION/configure"		\
		--target="$TARGET"		\
		--prefix="$PREFIX"		\
		--disable-nls			\
		--disable-shared		\
		--disable-multilib		\
		--disable-decimal-float		\
		--disable-threads		\
		--disable-libmudflap		\
		--disable-libssp		\
		--disable-libgomp		\
		--disable-libquadmath		\
		--enable-languages=c		\
		--without-ppl			\
		--without-cloog			\
		--with-sysroot="$DESTDIR"	\
		--with-newlib			\
		--without-headers		\
		--with-local-prefix="$PREFIX"	\
		--with-native-system-header-dir="$PREFIX/include"
	$MAKE
	$MAKE install
	build_done gcc
	clean gcc-build
fi

if [ ! -f .linux_done ]; then
	clean "linux-$LINUX_VERSION"
	extract_distfile "$LINUX_URL"
	cd "linux-$LINUX_VERSION"
	$MAKE headers_check
	$MAKE INSTALL_HDR_PATH=dest headers_install
	cp -rv dest/include/* "$PREFIX/include"
	build_done linux
fi

if [ ! -f .uclibc_done ]; then
	clean "uClibc-$UCLIBC_VERSION"
	extract_distfile "$UCLIBC_URL"
	cd "uClibc-$UCLIBC_VERSION"
	$MAKE defconfig
	apply_patch uclibc
	# Fix paths
	sed -Ee "s,(KERNEL_HEADERS=).*,\1$PREFIX/include," .config > .config.new
	sed -Ee "s,(CROSS_COMPILER_PREFIX=).*,\1$PREFIX/bin/$TARGET-," .config.new > .config
	$MAKE \
		CC="$PREFIX/bin/$TARGET-gcc" \
		PREFIX="" \
		DEVEL_PREFIX="${PREFIX}/" \
		RUNTIME_PREFIX="${PREFIX}/" \
		MULTILIB_DIR=lib/ \
		MAKE_IS_SILENT=n SECHO=@echo VERBOSE=1 \
		all utils install install_utils
	build_done uclibc
fi

if [ ! -f .binutils2_done ]; then
	clean binutils2-build
	mkdir -p binutils2-build
	cd binutils2-build
	CC=$TARGET-gcc					\
	AR=$TARGET-ar					\
	RANLIB=$TARGET-ranlib				\
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--disable-nls
	$MAKE
	$MAKE install
	$MAKE -C ld clean
	$MAKE -C ld LIB_PATH=/usr/lib:/lib
	cp -v ld/ld-new "$PREFIX/bin"
	build_done binutils2
fi
