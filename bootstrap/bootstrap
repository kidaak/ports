#!/bin/sh
#
# Copyright (c) 2012 Antti Harri <iku@openbsd.fi>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# XXX
# x can be removed if less verbose output is desired.
set -eux

# GNU make required
#
# Adjust -j parameter to speed up build on a multi-core system.
# See what the following prints if you're unsure:
# grep -c ^processor /proc/cpuinfo
JOBS=${JOBS:--j $(grep -c ^processor /proc/cpuinfo)}
MAKE="${MAKE:-make} $JOBS"
CC=${CC:-cc}
CXX=${CXX:-c++}
CCACHE=${CCACHE:-}

BASE=$(cd -- "$(dirname -- "$0")"; pwd)

SUDO=${SUDO:-}
FETCH_CMD="wget -c"
PORTSDIR=$(dirname $BASE)
DISTDIR=$PORTSDIR/distfiles
WRKDIR="${PORTSDIR}/pobj/bootstrap"
DESTDIR=$WRKDIR/buildroot
PREFIX=/tools
TRUEPREFIX=$DESTDIR$PREFIX

# Having the target triplet without the annoying -gnu
# suffix might not work on i386 systems.
ARCH=`uname -m`
TARGET=$ARCH-obscure-linux
PATH=$TRUEPREFIX/bin:/bin:/usr/bin:/usr/local/bin

BINUTILS_VERSION=2.22
BINUTILS_URL=http://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.gz
MPFR_VERSION=3.1.0
MPFR_URL=http://www.mpfr.org/mpfr-$MPFR_VERSION/mpfr-$MPFR_VERSION.tar.gz
GMP_VERSION=5.0.2
GMP_URL=ftp://ftp.gmplib.org/pub/gmp-$GMP_VERSION/gmp-$GMP_VERSION.tar.gz
MPC_VERSION=0.9
MPC_URL=http://www.multiprecision.org/mpc/download/mpc-$MPC_VERSION.tar.gz
GCC_VERSION=4.7.1
GCC_URL=http://ftp.nluug.nl/languages/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2
LINUX_VERSION=3.3.5
LINUX_URL=http://kernel.org/pub/linux/kernel/v3.0/linux-$LINUX_VERSION.tar.bz2
GLIBC_VERSION=2.15
GLIBC_URL=http://ftp.gnu.org/gnu/glibc/glibc-$GLIBC_VERSION.tar.xz

export PATH CC

# Pick up functions
. ./functions.sh

mkdir -p "$WRKDIR" "$DESTDIR" "$TRUEPREFIX"
$SUDO ln -fs "$DESTDIR/tools" /

cd "$WRKDIR"

if [ ! -f .binutils_done ]; then
	clean "binutils-$BINUTILS_VERSION" binutils-build
	extract_distfile "$BINUTILS_URL"
	apply_patch binutils

	mkdir binutils-build
	cd binutils-build

	CC="${CCACHE} ${CC}"				\
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-sysroot="$DESTDIR"		\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--target="$TARGET"			\
		--disable-werror			\
		--disable-nls
	$MAKE
	case $(uname -m) in
		x86_64) mkdir -p "$PREFIX/lib" && ln -fs lib "$PREFIX/lib64" ;;
	esac
	DESTDIR="$DESTDIR" $MAKE install
	build_done binutils
	clean binutils-build
fi

if [ ! -f .gcc_done ]; then
	# If gcc-build exists that means we have a working gcc source directory
	# in that case just wipe out the build.
	# This saves at least 2-3 minutes on another run of
	# gcc after a failed build.
	if [ -d "gcc-build" -a -d "gcc-$GCC_VERSION" ]; then
		clean gcc-build
	else
		clean "gcc-$GCC_VERSION" gcc-build
		extract_distfile \
			"gcc;$GCC_URL"
		for file in $(find "gcc-$GCC_VERSION/gcc/config" -name linux64.h -o -name linux.h -o -name sysv4.h); do
			cp -uv "$file" "$file.orig"
			sed -e "s@/lib\(64\)\?\(32\)\?/ld@${PREFIX}&@g" \
				-e "s@/usr@${PREFIX}@g" "$file.orig" > "$file"
			printf '\n\n/* Added by Obscure Linux bootstrap script */\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_1\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_2\n' >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_1 "%s/lib/"\n' "$PREFIX" >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> "$file"
			touch "$file.orig"
		done
		(cd "gcc-$GCC_VERSION" && \
			extract_distfile "$GMP_URL" && \
			extract_distfile "mpfr-$MPFR_VERSION;$MPFR_URL" && \
			extract_distfile "$MPC_URL" && \
			ln -sf "gmp-$GMP_VERSION" gmp && \
			ln -sf "mpfr-$MPFR_VERSION" mpfr && \
			ln -sf "mpc-$MPC_VERSION" mpc && \
			apply_patch mpfr)

	fi

	mkdir gcc-build
	cd gcc-build

	CC="${CCACHE} ${CC}"			\
	"../gcc-$GCC_VERSION/configure"		\
		--target="$TARGET"		\
		--prefix="$PREFIX"		\
		--disable-nls			\
		--disable-shared		\
		--disable-multilib		\
		--disable-decimal-float		\
		--disable-threads		\
		--disable-libmudflap		\
		--disable-libssp		\
		--disable-libgomp		\
		--disable-libquadmath		\
		--enable-languages=c		\
		--without-ppl			\
		--without-cloog			\
		--without-headers		\
		--with-newlib			\
		--with-sysroot="$DESTDIR"	\
		--with-local-prefix="$PREFIX"	\
		--with-native-system-header-dir="$PREFIX/include" \
		--with-mpfr-include="$(pwd)/../gcc-$GCC_VERSION/mpfr/src" \
		--with-mpfr-lib="$(pwd)"/mpfr/src/.libs
	$MAKE
	DESTDIR="$DESTDIR" $MAKE install

	ln -s libgcc.a "`$TARGET-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/'`"

	build_done gcc
	clean "gcc-$GCC_VERSION" gcc-build
fi

if [ ! -f .linux_done ]; then
	clean "linux-$LINUX_VERSION"
	extract_distfile "$LINUX_URL"
	cd "linux-$LINUX_VERSION"
	$MAKE headers_check
	$MAKE INSTALL_HDR_PATH=dest headers_install
	cp -rv dest/include/* "$PREFIX/include"
	build_done linux
	clean "linux-$LINUX_VERSION"
fi

if [ ! -f .glibc_done ]; then
	if [ -d "glibc-build" -a -d "glibc-$GLIBC_VERSION" ]; then
		clean glibc-build
	else
		clean "glibc-$GLIBC_VERSION"
		extract_distfile "$GLIBC_URL"
		apply_patch glibc

		(cd "glibc-$GLIBC_VERSION" && \
			sed -i 's#$ac_includes_default#\n\n#' sysdeps/i386/configure && \
			sed -i "s#/var/db#${PREFIX}/var/db#" Makeconfig)
	fi

	mkdir glibc-build
	cd glibc-build

	# Glibc doesn't support i386, use i486.
	case `uname -m` in
		i?86) echo "CFLAGS += -march=i486 -mtune=native" > configparms ;;
	esac

	CC="$CCACHE $TARGET-gcc"						\
	../glibc-"$GLIBC_VERSION"/configure					\
		--prefix=/tools							\
		--host=$TARGET							\
		--build="$(../glibc-"$GLIBC_VERSION"/scripts/config.guess)"	\
		--disable-profile						\
		--enable-add-ons						\
		--enable-kernel=2.6.25						\
		--with-headers="$PREFIX"/include				\
		libc_cv_forced_unwind=yes					\
		libc_cv_ctors_header=yes					\
		libc_cv_c_cleanup=yes

	$MAKE
	$MAKE install

	# Test the new setup.
	echo 'main(){}' > dummy.c
	"$TARGET"-gcc dummy.c
	readelf -l a.out | grep -Eq ': /tools/lib(32|64)?/ld-linux.*\.so\..+' || \
		(echo "Dynamic linker does not seem right in the test program" ; exit 1)

	build_done glibc
	clean "glibc-$GLIBC_VERSION" glibc-build
fi

if [ ! -f .binutils2_done ]; then
	clean binutils2-build

	mkdir -p binutils2-build
	cd binutils2-build

	CC="${CCACHE} $TARGET-gcc"			\
	AR=$TARGET-ar					\
	RANLIB=$TARGET-ranlib				\
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--disable-nls

	$MAKE
	$MAKE install

	$MAKE -C ld clean
	$MAKE -C ld LIB_PATH=/usr/lib:/lib
	cp ld/ld-new "$PREFIX/bin"

	build_done binutils2
	clean "binutils-$BINUTILS_VERSION" binutils2-build
fi

if [ ! -f .gcc2_done ]; then
	# If gcc2-build exists that means we have a working gcc source directory
	# in that case just wipe out the build.
	# This saves at least 2-3 minutes on another run of
	# gcc after a failed build.
	if [ -d "gcc2-build" -a -d "gcc-$GCC_VERSION" ]; then
		clean gcc2-build
	else
		clean "gcc-$GCC_VERSION" gcc2-build
		extract_distfile "gcc;$GCC_URL"
		for file in $(find "gcc-$GCC_VERSION/gcc/config" -name linux64.h -o -name linux.h -o -name sysv4.h); do
			cp -uv "$file" "$file.orig"
			sed -e "s@/lib\(64\)\?\(32\)\?/ld@${PREFIX}&@g" \
				-e "s@/usr@${PREFIX}@g" "$file.orig" > "$file"
			printf '\n\n/* Added by Obscure Linux bootstrap script */\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_1\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_2\n' >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_1 "%s/lib/"\n' "$PREFIX" >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> "$file"
			touch "$file.orig"
		done

		(cd "gcc-$GCC_VERSION" && \
			cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
				`dirname "$("$TARGET-gcc" -print-libgcc-file-name)"`/include-fixed/limits.h && \
			cp gcc/Makefile.in gcc/Makefile.in.tmp && \
			sed 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in.tmp \
				> gcc/Makefile.in)

		(cd "gcc-$GCC_VERSION" && \
			extract_distfile "$GMP_URL" && \
			extract_distfile "mpfr-$MPFR_VERSION;$MPFR_URL" && \
			extract_distfile "$MPC_URL" && \
			ln -sf "gmp-$GMP_VERSION" gmp && \
			ln -sf "mpfr-$MPFR_VERSION" mpfr && \
			ln -sf "mpc-$MPC_VERSION" mpc && \
			apply_patch mpfr)
	fi

	mkdir gcc2-build
	cd gcc2-build

	CC="${CCACHE} $TARGET-gcc"		\
	AR=$TARGET-ar				\
	RANLIB=$TARGET-ranlib			\
	"../gcc-$GCC_VERSION/configure"		\
		--prefix="$PREFIX"		\
		--disable-libstdcxx-pch		\
		--disable-multilib		\
		--disable-bootstrap		\
		--disable-libgomp		\
		--enable-clocale=gnu		\
		--enable-shared			\
		--enable-threads=posix		\
		--enable-__cxa_atexit		\
		--enable-languages=c,c++	\
		--without-ppl			\
		--without-cloog			\
		--with-local-prefix="$PREFIX"	\
		--with-mpfr-include=$(pwd)/../gcc-"$GCC_VERSION"/mpfr/src	\
		--with-mpfr-lib=$(pwd)/mpfr/src/.libs				\
		--with-native-system-header-dir="$PREFIX/include"
	$MAKE
	DESTDIR="$DESTDIR" $MAKE install
	build_done gcc2
	clean "gcc-$GCC_VERSION" gcc2-build
fi
