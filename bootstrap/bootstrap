#!/bin/sh
#
# Copyright (c) 2012 Antti Harri <iku@openbsd.fi>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# XXX
# x can be removed if less verbose is desired.
set +h
set -eux

# GNU make required
#
# Adjust -j parameter to speed up build on a multi-core system.
# See what the following prints if you're unsure:
# grep -c ^processor /proc/cpuinfo
MAKE="${MAKE:-make} -j $(grep -c ^processor /proc/cpuinfo)"
CC=${CC:-cc}

BASE=$(cd -- "$(dirname -- "$0")"; pwd)

SUDO=${SUDO:-}
FETCH_CMD="wget -c"
PORTSDIR=$(dirname $BASE)
DISTDIR=$PORTSDIR/distfiles
WRKDIR="${PORTSDIR}/pobj/bootstrap"
DESTDIR=$WRKDIR/buildroot
PREFIX=/tools
TRUEPREFIX=$DESTDIR$PREFIX

# Having the target triplet without the annoying -gnu
# suffix might not work on i386 systems.
ARCH=`uname -m`
TARGET=$ARCH-obscure-linux
PATH=$TRUEPREFIX/bin:/bin:/usr/bin:/usr/local/bin

BINUTILS_VERSION=2.22
BINUTILS_URL=http://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.gz
MPFR_VERSION=3.1.0
MPFR_URL=http://www.mpfr.org/mpfr-$MPFR_VERSION/mpfr-$MPFR_VERSION.tar.gz
GMP_VERSION=5.0.2
GMP_URL=ftp://ftp.gmplib.org/pub/gmp-$GMP_VERSION/gmp-$GMP_VERSION.tar.gz
MPC_VERSION=0.9
MPC_URL=http://www.multiprecision.org/mpc/download/mpc-$MPC_VERSION.tar.gz
GCC_VERSION=4.7.0
GCC_URL=http://ftp.nluug.nl/languages/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2
LINUX_VERSION=3.3.5
LINUX_URL=http://kernel.org/pub/linux/kernel/v3.0/linux-$LINUX_VERSION.tar.bz2
UCLIBC_VERSION=0.9.33.2
UCLIBC_URL=http://www.uclibc.org/downloads/uClibc-$UCLIBC_VERSION.tar.xz

export PATH CC

# Pick up functions
. ./functions.sh

mkdir -p "$WRKDIR" "$DESTDIR" "$TRUEPREFIX"
$SUDO ln -fs "$DESTDIR/tools" /

cd "$WRKDIR"

if [ ! -f .binutils_done ]; then
	clean "binutils-$BINUTILS_VERSION" binutils-build
	extract_distfile "$BINUTILS_URL"
	apply_patch binutils
	mkdir binutils-build
	cd binutils-build
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-sysroot="$DESTDIR"		\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--target="$TARGET"			\
		--disable-werror			\
		--disable-nls
	$MAKE
	case $(uname -m) in
		x86_64) mkdir -p "$PREFIX/lib" && ln -fs lib "$PREFIX/lib64" ;;
	esac
	DESTDIR="$DESTDIR" $MAKE install
	build_done binutils
	clean binutils-build
fi

if [ ! -f .gmp_done ]; then
	clean "gmp-$GMP_VERSION" gmp-build
	extract_distfile "$GMP_URL"
	mkdir gmp-build
	cd gmp-build
	"../gmp-$GMP_VERSION/configure"	\
		--disable-shared	\
		--prefix="$PREFIX"
	$MAKE
	$MAKE install
	build_done gmp
	clean "gmp-$GMP_VERSION" gmp-build
fi

if [ ! -f .mpfr_done ]; then
	clean "mpfr-$MPFR_VERSION" mpfr-build
	extract_distfile "mpfr-$MPFR_VERSION;$MPFR_URL"
	mkdir mpfr-build
	cd mpfr-build
	"../mpfr-$MPFR_VERSION/configure"	\
		--disable-shared		\
		--prefix="$PREFIX"		\
		--with-gmp="$PREFIX"
	$MAKE
	$MAKE install
	build_done mpfr
	clean "mpfr-$MPFR_VERSION" mpfr-build
fi

if [ ! -f .mpc_done ]; then
	clean "mpc-$MPC_VERSION" mpc-build
	extract_distfile "$MPC_URL"
	mkdir mpc-build
	cd mpc-build
	"../mpc-$MPC_VERSION/configure"		\
		--disable-shared		\
		--prefix="$PREFIX"		\
		--with-gmp="$PREFIX"		\
		--with-mpfr="$PREFIX"
	$MAKE
	$MAKE install
	build_done mpc
	clean "mpc-$MPC_VERSION" mpc-build
fi

if [ ! -f .gcc_done ]; then
	# If gcc-build exists that means we have a working gcc source directory
	# in that case just wipe out the build.
	# This saves at least 2-3 minutes on another run of
	# gcc after a failed build.
	if [ -d "gcc-build" -a -d "gcc-$GCC_VERSION" ]; then
		clean gcc-build
	else
		clean "gcc-$GCC_VERSION" gcc-build
		extract_distfile "gcc;$GCC_URL"
		for file in $(find "gcc-$GCC_VERSION/gcc/config" -name linux64.h -o -name linux.h -o -name sysv4.h); do
			cp -uv "$file" "$file.orig"
			sed -e "s@/lib\(64\)\?\(32\)\?/ld@${PREFIX}&@g" \
				-e "s@/usr@${PREFIX}@g" "$file.orig" > "$file"
			printf '\n\n/* Added by Obscure Linux bootstrap script */\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_1\n' >> "$file"
			printf '#undef STANDARD_STARTFILE_PREFIX_2\n' >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_1 "%s/lib/"\n' "$PREFIX" >> "$file"
			printf '#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> "$file"
			touch "$file.orig"
		done
		# Fixes x86 and x86_64
		printf '#undef GLIBC_DYNAMIC_LINKER\n' >> "gcc-$GCC_VERSION/gcc/config/linux.h"
		printf '#define GLIBC_DYNAMIC_LINKER "%s/lib/ld-%s.so"\n' "$PREFIX" "$ARCH" >> "gcc-$GCC_VERSION/gcc/config/linux.h"
		printf '#undef GLIBC_DYNAMIC_LINKER\n' >> "gcc-$GCC_VERSION/gcc/config/i386/linux.h"
		printf '#define GLIBC_DYNAMIC_LINKER "%s/lib/ld-%s.so"\n' "$PREFIX" "$ARCH" >> "gcc-$GCC_VERSION/gcc/config/i386/linux.h"

		printf '#undef GLIBC_DYNAMIC_LINKER32\n' >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"
		printf '#undef GLIBC_DYNAMIC_LINKER64\n' >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"
		printf '#undef GLIBC_DYNAMIC_LINKERX32\n' >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"
		printf '#define GLIBC_DYNAMIC_LINKER32 "%s/lib/ld-%s.so"\n' "$PREFIX" "$ARCH" >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"
		printf '#define GLIBC_DYNAMIC_LINKER64 "%s/lib/ld-%s.so"\n' "$PREFIX" "$ARCH" >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"
		printf '#define GLIBC_DYNAMIC_LINKERX32 "%s/lib/ld-%s.so"\n' "$PREFIX" "$ARCH" >> "gcc-$GCC_VERSION/gcc/config/i386/linux64.h"

	fi

	mkdir gcc-build
	cd gcc-build

	"../gcc-$GCC_VERSION/configure"		\
		--target="$TARGET"		\
		--prefix="$PREFIX"		\
		--disable-nls			\
		--disable-shared		\
		--disable-multilib		\
		--disable-decimal-float		\
		--disable-threads		\
		--disable-libmudflap		\
		--disable-libssp		\
		--disable-libgomp		\
		--disable-libquadmath		\
		--enable-languages=c		\
		--without-ppl			\
		--without-cloog			\
		--with-sysroot="$DESTDIR"	\
		--with-newlib			\
		--without-headers		\
		--with-local-prefix="$PREFIX" \
		--with-native-system-header-dir="$PREFIX/include"
	$MAKE
	DESTDIR="$DESTDIR" $MAKE install
	build_done gcc
	clean gcc-build
fi

if [ ! -f .linux_done ]; then
	clean "linux-$LINUX_VERSION"
	extract_distfile "$LINUX_URL"
	cd "linux-$LINUX_VERSION"
	$MAKE headers_check
	$MAKE INSTALL_HDR_PATH=dest headers_install
	cp -rv dest/include/* "$PREFIX/include"
	build_done linux
	clean "linux-$LINUX_VERSION"
fi

if [ ! -f .uclibc_done ]; then
	clean "uClibc-$UCLIBC_VERSION"
	extract_distfile "$UCLIBC_URL"
	cd "uClibc-$UCLIBC_VERSION"
	$MAKE defconfig
	# Copy the default if we want to regenerate the patch.
	cp -f .config .config.default
	apply_patch uclibc
	# Fix paths
	sed -Ee "s,(KERNEL_HEADERS=).*,\1\"$PREFIX/include\"," .config > .config.sed
	sed -Ee "s,(CROSS_COMPILER_PREFIX=).*,\1\"$PREFIX/bin/$TARGET-\"," .config.sed > .config
	MAKE_FLAGS="UCLIBC_LDSO_NAME=ld-$ARCH ldso_FULL_NAME=ld-$ARCH.so.0.0"
	for i in c crypt dl m pthread rt nsl resolv util; do
		MAKE_FLAGS="$MAKE_FLAGS lib${i}_FULL_NAME=lib${i}.so.0.0"
	done
	MAKE_FLAGS="$MAKE_FLAGS
		CC=$TARGET-gcc
		MAJOR_VERSION=0
		MINOR_VERSION=0
		SUBLEVEL=0
		EXTRAVERSION=0
		VERSION=
		ABI_VERSION=0.0
		PREFIX=
		DEVEL_PREFIX=${PREFIX}/
		RUNTIME_PREFIX=${PREFIX}/
		MULTILIB_DIR=lib/
		MAKE_IS_SILENT=n SECHO=@echo VERBOSE=1"
	$MAKE $MAKE_FLAGS all
	$MAKE $MAKE_FLAGS utils
	$MAKE $MAKE_FLAGS install install_utils
	ln -fs "ld-$ARCH.so.0.0" "$PREFIX/lib/ld-$ARCH.so"
	build_done uclibc
	clean "uClibc-$UCLIBC_VERSION"
fi

if [ ! -f .binutils2_done ]; then
	clean binutils2-build
	mkdir -p binutils2-build
	cd binutils2-build
	CC=$TARGET-gcc					\
	AR=$TARGET-ar					\
	RANLIB=$TARGET-ranlib				\
	"../binutils-$BINUTILS_VERSION/configure"	\
		--with-lib-path="$PREFIX/lib"		\
		--prefix="$PREFIX"			\
		--disable-nls
	$MAKE
	$MAKE install
	$MAKE -C ld clean
	$MAKE -C ld LIB_PATH=/usr/lib:/lib
	cp -v ld/ld-new "$PREFIX/bin"
	build_done binutils2
	clean "binutils-$BINUTILS_VERSION" binutils2-build
fi
